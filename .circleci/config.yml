# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > src/acl/version.json

docker-login: &docker-login
  # Login to DockerHub
  #
  # Nota bene: you'll need to define the following secrets environment vars
  # in CircleCI interface:
  #
  #   - DOCKER_HUB_USER
  #   - DOCKER_HUB_PASSWORD
  run:
    name: Login to DockerHub
    command: >
      test -n "$DOCKER_HUB_USER" &&
        echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER" --password-stdin ||
        echo "Docker Hub anonymous mode"

version: 2.1
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: cimg/python:3.9
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint requests
      - run:
          name: Lint commit messages added to main
          command: |
            ~/.local/bin/gitlint --commits origin/main..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # ---- Docker jobs ----
  # Build the Docker image used in development
  build-docker-potsie:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build development image
          command: make build-app
      - run:
          name: Check built image availability
          command: docker images "potsie:*"


  # Build the Docker image ready for production
  build-docker-acl:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      - checkout
      - *generate-version-file
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production image
          command: docker build -t potsie-acl-proxy:${CIRCLE_SHA1} --target production src/acl
      - run:
          name: Check built image availability
          command: docker images "potsie-acl-proxy:${CIRCLE_SHA1}*"

  # Compile Jsonnet sources
  compile:
    machine:
      image: ubuntu-2004:202111-02
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Build development image
          command: make build-app
      - run:
          name: Compile sources
          command: make compile
      - persist_to_workspace:
          root: .
          paths:
            - var/lib/grafana/dashboards

  # Lint Jsonnet sources
  lint-jsonnet:
    machine:
      image: ubuntu-2004:202111-02
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Build production image
          command: make build-app
      - run:
          name: Format sources
          command: |
            bin/jsonnetfmt --test $(find src/ -type f -name '*.jsonnet') $(find src/ -type f -name '*.libsonnet')
      - run:
          name: Lint sources
          command: make lint-jsonnet

  # Lint acl
  lint-acl:
    machine:
      image: ubuntu-2004:202111-02
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Build acl development image
          command: make build-acl
      - run:
          name: Lint sources
          command: make lint-acl

  # Test acl
  test-acl:
    machine:
      image: ubuntu-2004:202111-02
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Build acl development image
          command: make build-acl
      - run:
          name: Load test fixtures
          command: make fixtures
      - run:
          name: Test sources
          command: make test

  # Build and test plugins
  plugins:
    machine:
      image: ubuntu-2004:202111-02
    working_directory: ~/fun
    steps:
      - checkout
      - run:
          name: Install plugins dependencies
          command: make dependencies
      - run:
          name: Build plugins
          command: make plugins
      - run:
          name: Copy plugins distribution
          command: make plugins-dist
      - persist_to_workspace:
          root: .
          paths:
            - var/lib/grafana/plugins

  # Make a new github release
  release:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_HUB_USER
          password: $DOCKER_HUB_PASSWORD
    working_directory: ~/fun
    steps:
      # Add a deployment key to allow write access to the github repository
      - add_ssh_keys:
          fingerprints:
            - "ca:0c:a4:e2:4a:43:ca:9f:ee:15:cf:99:94:4e:78:38"
      - checkout
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/fun
      - run:
          name: Install gh CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
              sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
      - run:
          name: Define release reference
          command: |
            echo 'RELEASE=$([[ -z "$CIRCLE_TAG" ]] && echo "latest" || echo "${CIRCLE_TAG}")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build release archive
          command: |
            mkdir releases
            tar cvzf releases/potsie-${RELEASE}.tgz -C ~/fun var/lib/grafana
      - *generate-version-file
      - *docker-login
      - run:
          name: Build release acl proxy docker images
          command: |
            docker build -t potsie-acl-proxy:${RELEASE} --target production src/acl
            docker tag potsie-acl-proxy:${RELEASE} fundocker/potsie-acl-proxy:${RELEASE/v/}
            if [[ "${RELEASE}" != "latest" ]]; then
              docker tag potsie-acl-proxy:${RELEASE} fundocker/potsie-acl-proxy:latest
            fi
            docker images "potsie-acl-proxy"
      - run:
          name: Publish acl proxy docker images
          command: |
            docker push fundocker/potsie-acl-proxy:${RELEASE/v/}
            if [[ "${RELEASE}" != "latest" ]]; then
              docker push fundocker/potsie-acl-proxy:latest
            fi
      - run:
          name: Get release changes
          command: |
            if [[ "${RELEASE}" == "latest" ]]; then
              tag="Unreleased" ;
            else
              tag="${RELEASE/v/}" ;
            fi
            sed -E -n "/^## \[${tag}\]/,/^##\ /{/^## \[${tag}\]/d ;/^##\ /d; p}" CHANGELOG.md > release.md
      - run:
          name: Create release on GitHub
          command: |
            gh config set prompt disabled
            if [[ "${RELEASE}" == "latest" ]]; then
              gh release delete -y "${RELEASE}" || true;
              git push origin ":${RELEASE}";
              gh release create -F release.md -t "${RELEASE}" -p "${RELEASE}" ./releases/*;
            else
              if ! gh release list | grep "${RELEASE}"; then
                gh release create -F release.md -t "${RELEASE/v/}" "${RELEASE}";
              fi
              gh release upload --clobber "${RELEASE}" ./releases/*;
            fi

workflows:
  version: 2

  potsie:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/
      # Check CHANGELOG update
      - check-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/
      - lint-changelog:
          filters:
            branches:
              ignore: main
            tags:
              only: /.*/

      # Build tooling
      - build-docker-potsie:
          filters:
            tags:
              only: /.*/
      - build-docker-acl:
          filters:
            tags:
              only: /.*/

      # Compile sources
      - compile:
          requires:
            - build-docker-potsie
          filters:
            tags:
              only: /.*/

      # Quality checks
      - lint-jsonnet:
          requires:
            - build-docker-potsie
          filters:
            tags:
              only: /.*/
      - lint-acl:
          requires:
            - build-docker-acl
          filters:
            tags:
              only: /.*/
      - test-acl:
          requires:
            - build-docker-acl
          filters:
            tags:
              only: /.*/
      - plugins:
          filters:
            tags:
              only: /.*/

      # Releases
      - release:
          requires:
            - lint-jsonnet
            - lint-acl
            - test-acl
            - compile
            - plugins
          filters:
            branches:
              only: main
            tags:
              only: /^v.*/
